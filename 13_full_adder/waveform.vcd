$version Generated by VerilatedVcd $end
$timescale 1s $end
 $scope module TOP $end
  $var wire 4 , inp_1 [3:0] $end
  $var wire 4 - inp_2 [3:0] $end
  $var wire 4 . sum [3:0] $end
  $var wire 1 / carry $end
  $scope module adder $end
   $var wire 4 , inp_1 [3:0] $end
   $var wire 4 - inp_2 [3:0] $end
   $var wire 4 . sum [3:0] $end
   $var wire 1 / carry $end
   $var wire 1 # carry_0 $end
   $var wire 1 $ carry_1 $end
   $var wire 1 % carry_2 $end
   $scope module f0 $end
    $var wire 3 0 abc_i [2:0] $end
    $var wire 1 1 sum $end
    $var wire 1 # carry $end
    $var wire 1 2 sum_0 $end
    $var wire 1 C carry_0 $end
    $var wire 1 1 sum_1 $end
    $var wire 1 # carry_1 $end
    $scope module ha0 $end
     $var wire 1 C a $end
     $var wire 1 2 b $end
     $var wire 1 2 sum $end
     $var wire 1 C carry $end
     $var wire 1 2 sum_tmp $end
     $var wire 1 C carry_tmp $end
    $upscope $end
    $scope module ha1 $end
     $var wire 1 2 a $end
     $var wire 1 3 b $end
     $var wire 1 1 sum $end
     $var wire 1 # carry $end
     $var wire 1 1 sum_tmp $end
     $var wire 1 # carry_tmp $end
    $upscope $end
   $upscope $end
   $scope module f1 $end
    $var wire 3 & abc_i [2:0] $end
    $var wire 1 4 sum $end
    $var wire 1 $ carry $end
    $var wire 1 ' sum_0 $end
    $var wire 1 5 carry_0 $end
    $var wire 1 4 sum_1 $end
    $var wire 1 6 carry_1 $end
    $scope module ha0 $end
     $var wire 1 # a $end
     $var wire 1 7 b $end
     $var wire 1 ' sum $end
     $var wire 1 5 carry $end
     $var wire 1 ' sum_tmp $end
     $var wire 1 5 carry_tmp $end
    $upscope $end
    $scope module ha1 $end
     $var wire 1 ' a $end
     $var wire 1 8 b $end
     $var wire 1 4 sum $end
     $var wire 1 6 carry $end
     $var wire 1 4 sum_tmp $end
     $var wire 1 6 carry_tmp $end
    $upscope $end
   $upscope $end
   $scope module f2 $end
    $var wire 3 ( abc_i [2:0] $end
    $var wire 1 9 sum $end
    $var wire 1 % carry $end
    $var wire 1 ) sum_0 $end
    $var wire 1 : carry_0 $end
    $var wire 1 9 sum_1 $end
    $var wire 1 ; carry_1 $end
    $scope module ha0 $end
     $var wire 1 $ a $end
     $var wire 1 < b $end
     $var wire 1 ) sum $end
     $var wire 1 : carry $end
     $var wire 1 ) sum_tmp $end
     $var wire 1 : carry_tmp $end
    $upscope $end
    $scope module ha1 $end
     $var wire 1 ) a $end
     $var wire 1 = b $end
     $var wire 1 9 sum $end
     $var wire 1 ; carry $end
     $var wire 1 9 sum_tmp $end
     $var wire 1 ; carry_tmp $end
    $upscope $end
   $upscope $end
   $scope module f3 $end
    $var wire 3 * abc_i [2:0] $end
    $var wire 1 > sum $end
    $var wire 1 / carry $end
    $var wire 1 + sum_0 $end
    $var wire 1 ? carry_0 $end
    $var wire 1 > sum_1 $end
    $var wire 1 @ carry_1 $end
    $scope module ha0 $end
     $var wire 1 % a $end
     $var wire 1 A b $end
     $var wire 1 + sum $end
     $var wire 1 ? carry $end
     $var wire 1 + sum_tmp $end
     $var wire 1 ? carry_tmp $end
    $upscope $end
    $scope module ha1 $end
     $var wire 1 + a $end
     $var wire 1 B b $end
     $var wire 1 > sum $end
     $var wire 1 @ carry $end
     $var wire 1 > sum_tmp $end
     $var wire 1 @ carry_tmp $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b000 &
0'
b010 (
1)
b000 *
0+
b0000 ,
b0100 -
b0100 .
0/
b000 0
01
02
03
04
05
06
07
08
19
0:
0;
1<
0=
0>
0?
0@
0A
0B
0C
#1
1$
1%
b110 &
1'
b011 (
0)
b001 *
1+
b0010 ,
b0110 -
b1000 .
16
17
18
09
1:
1>
#2
0$
0%
b010 &
b000 (
b100 *
0+
b1000 ,
b0010 -
b1010 .
14
06
08
0:
0<
1B
#5
